Prolog and Logic Programming
------------------------------------------------------------------------------------------------------------------------
Metaphor: programming as search

the programmer specifies:
	-facts (things that are true about the world)
	-rules (ways to learn new things that are true about the world)
	-a program is a query (asking what things are true about the world)

"declarative" programming
	-say what you want
	-system figures out the "how"

------------------------------------------------------------------------------------------------------------------------
	
/*
A set of facts about the CS department courses

lowercase variable names are "atoms" (an uninterpreted constant)

prereq is a "predicate" (an uninterpreted function that returns a boolean)
*/

prereq(cs31, cs32)
prereq(cs32, cs33)
prereq(cs31, cs35L)
prereq(cs32, cs111)
...

prereq(cs31, cs33).
	no
prereq(cs32, cs33).
	true?
	(continue) no
prereq(cs31, X).
	(X is used as a variable; returns courses in which cs31 is a prereq)
	
prereq(cs32, X), prereq(cs32, Y).
	(returns all pairs X,Y, such that they both have cs32 as prerequisites; but this gives X=Y as well)
prereq(cs32, X), prereq(cs32, Y), \+(X=Y). 
	(makes sure X and Y don't equal)
/* find a course that has cs32 as a prereq and is itself a prereq of cs 132 */
prereq(cs32, X), prereq(X, cs132).

/* find two courses that have at least one prereq in common */
prereq(X,Y), prereq(X,Z) \+(Y=Z).

------------------------------------------------------------------------------------------------------------------------

/* a rule lets you give a name to a query */
prereqInCommon(Y,Z) :- prereq(X,Y),prereq(X,Z) \+(Y=Z).			(head of rule :- body of rule)

prereqInCommon(A,B), prereq(A,B).		/* two courses that share a common prereq, but one is prereq of the other */

prereqOfPrereq(X,Z) :- prereq(X,Y),prereq(Y,Z).
prereqOfPrereq(X,Y) :- prereq(X,Y). /* after desiging this, we get first and second-level prereqs */

/* true if X is a (transitive) prereq of Y; use recursion */
prereqTrans(X,Y) :- prereq(X,Y).
prereqTrans(X,Y) :- prereq(X,Z), prereqTrans(Z,Y).

prereq(X,foo) = prereq(bar,Y)
	X=bar
	Y=foo
	yes
	
/* it doesn't know arithmetic though via matching */
1+2=2+1
	no
1+2=3
	no
	
1+2 =:= 3.
	yes
	
------------------------------------------------------------------------------------------------------------------------

[]
	yes
	
X = [1,2,3].

[X|Y] = [1,2,3].
	X=1
	Y=[2,3]
	yes
	
[X,Y|Z] = [1,2,3]
	
	
.(1, .(2, .(3, []))) = [1,2,3].
	yes
	
append([1,2,3], X, [1,2,3,4,5,6]).
	X=[4,5,6]
	yes

append(X, Y, [1,2,3,4,5,6])
	/* gives all possible solutions */

Writing our own append using recursion...
/* In OCaml: 
let append l1 l2 = 
	match l1 with
	[] -> l2
	| h::t -> h::(append t l2)

*/
app([], L, L). 		/* equivalent to: app(X,Y,Z) :- X=[], Y=Z. */
app([H|T], L2, [H|L3]) :- app(T, L2, L3)

------------------------------------------------------------------------------------------------------------------------

reverse([1,2,3,4], X)
	X=[4,3,2,1]
	yes
	
reverse(X, [1,2,3,4])
	X=[4,3,2,1]
	yes

rev([],[]).
rev([H|T],L) :- rev(T,R),app(R,[H],L).
	/* Reverse T which gives us back some R. Append [H] to R and we get back some L. L is the cummulative result of reverse. */
	
------------------------------------------------------------------------------------------------------------------------

/* boat problem

four entities: person, goat, cabbage, wolf

initial state: all 4 entities are on the west bank
goal state: all 4 entities are on the east bank

constraints: the boat can only take the person + 1 other entity
the cabbage and goat can't be left alone
the goat and wolf can't be left alone

state(P,C,G,W)
	variables take on either the value west or east
	
initial state: state(west,west,west,west)
goal state: state(east,east,east,east)


move(CurrState, Action, NextState) */

example:
	move(state(west,west,west,west), goat, state(east,west,east,west))	
	
*/	

opposite(west,east)
opposite(east,west)

move(state(P,P,G,W), cabbage, state(P2,P2,G,W)) :- opposite(P,P2), opposite(G,W)

move(state(P,C,P,W), goat, state(P2,C,P2,W)) :- opposite(P,P2)

move(state(P,C,G,P), wolf, state(P2,C,G,P2)) :- opposite(P,P2), opposite(C,G)

move(state(P,C,G,W), nothing, state(P2,C,G,W)) :- opposite(P,P2), opposite(C,G), opposite(G,W)

/* puzzle(Start, Goal, Actions) */

puzzle(Goal,Goal,[]).
puzzle(Start,Goal,[Action | Actions]) :- 
	move(Start,Action,NextState),puzzle(NextState,Goal,Actions).
	
length(Actions, 7), puzzle(state(west,west,west,west), state(east,east,east,east), Actions).