------------------------------------------------------------------------------------------------------------------------

import java.util.*;

class MyComparator implements Comparator<Integer> {
	public int compare(Integer o1, integer o2) {
		if (o1<o2)
			return 1; //descending order; the smallest one is at the end of the list
		else if (o2<o1)
			return -1;
		else
			return 0;
	}
	
	//we don't need equals since it's inherited
}

class Test {
	
	public static void main(final String[] args) { //final denotes something that can't be changed

		List<Integer> lst = new arrayList<Integer>();
		lst.add(34);
		lst.add(23);
		lst.add(56);
		lst.add(0);
	
		//Collections.sort(lst, new MyComparator());
		
		Collections.sort(lst, new MyComparator<Integer>() {
			public int compare(Integer o1, integer o2) {
				if (o1<o2)
					return 1; 
				else if (o2<o1)
					return -1;
				else
					return 0;
			}
		});
		System.out.println(lst);
	}
}

------------------------------------------------------------------------------------------------------------------------

//Buffer overflows in C/C++

Java's memory model
--------------------

Set s = new ArraySet();
//s is a "reference" (pointer) to an object whose class is ArraySet

s.add("hello");

Set s2 = s;
//s2 is now an "alias" of s - they're references to the same object

s2.add("bye");

void myAdd(Set myS) {
	myS.add("hi");
}

myAdd(s);
//s now has size 3, [hello;bye;hi]

//another example:
void myAdd2(Set myS) {
	myS = new ArraySet();
	myS.add("hi");
}

myAdd2(s);
//s is not changed, since we redirect myS into a new array (and then add "hi" to it)

//What about primitives?

int i = 34;
int i2 = i;
i2 = 0;

------------------------------------------------------------------------------------------------------------------------

Parameter Passing
--------------------

Java does parameter passing "by value"
	-copy the value of the actual argument into the formal parameter

Key point: value of the actual argument cannot be affected by the call

int plus(int a, int b) {
	a += b;
	return a;
}

int x = 3;
int y = 4;
int z = plus(x,y);

//x,y,z = 3,4,7, respectively

class Integer {
	int value;
	Integer(int val) {this.value = val; }	
}

Integer plus(Integer a, Integer b) {
	a = new Integer(a.value + b.value);
	return a;
}

Integer x = new Integer(3); //Integer(3)
Integer y = new Integer(4); //Integer(4)
Integer z = plus(3,4); //Integer(7)


Integer plus(Integer a, Integer b) {
	a.value = a.value + b.value;
	return a;
}
//this method above would produce 7, 4, 7, respectively

Other languages sometimes have passing "by reference"
	-make the formal parameter an alias of the actual argument
	
int plus(int& a, int& b) {
	a+=b;
	return a;
}

int x = 3;
int y = 4;
int z = plus(x,y); //results in 7, 4, 7, respectively

int v = plus(3,4); //error; there's no stack slot allocated to 3 or 4, which are uassignable constants!