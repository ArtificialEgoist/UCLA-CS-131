------------------------------------------------------------------------------------------------------------------------

E::=...
	| (function P -> E)										(* Anonymous Function or "lambda" *)
	
Example:
let square = (function x -> x*x);;
	square;;
		int -> int = <fun>
	
	square 3;;
		int = 9
	let sq = square;;
	sq 3;;
		int = 9

Example:		
let twice (f,x) = f(f x)
		('a -> 'a) * 'a -> 'a = <fun>
	twice(square, 3);;
		int = 81

	twice ((function x -> x+1), 34);;
		int = 36
		
Functions in OCaml are "first-class": you can do anything with functions that you can do with any other expression

A function that takes another function as an argument (e.g., twice) is called a "higher-order function"

(function P1 -> (function P2 -> ... (function Pn -> E) ... ))
	SHORTHAND: fun P1 P2...Pn-> E

------------------------------------------------------------------------------------------------------------------------

let curriedAdd = 
	(function x -> (function y -> x+y));;
		int -> int -> int = <fun>
	add(3,4);;
		int = 7
	let partial = curriedAdd 3;;
		partial 4;;
			int = 7
		partial 56;;
			int = 59
	
	(curriedAdd 3) 4;;										SAME AS: curriedAdd 3 4 or (curriedAdd 3) 4, since functions are left associative
		int = 7
		
let curriedAdd = (fun x y -> x+y);;
let curriedAdd x y = x+y;;

(function P1 -> (function P2 -> ... (function Pn -> E) ... ))
	SHORTHAND: fun P1 P2...Pn-> E

	More curried functions:
	let twice (f,x) = f(f x);;
	('a -> 'a) * 'a -> 'a = <fun>
		twice square 3;;
		int = 81
	
	let toThe4thPower = twice square;;
		toThe4thPower 3;;
			int = 81
		toThe4thPower 5;;
			int - 625
	let tothe16thPower = twice toThe4thPower;;
		tothe16thPower 3;;
		int = 43046721

------------------------------------------------------------------------------------------------------------------------
		
Example of generic traversal:
	let rec incLst l = 
		match l with [] -> []
		x:: xs -> (x+1)::(incLst xs)

	let rec swapLst l =
		match l with [] -> []
		| (x, y)::xs -> (y,x)::swapLst xs
	
(* OCaml's map function generalizes this problem: invaokes a user recognized function on each element of a list *)
(* map: ('a -> 'b) -> 'a list -> 'b list *)

List.map [1;2;3;4]

let incLst = List.map (function x -> x+1);;
	incLst [1;2;3;4];;
		int list = [2;3;4;5]
let swapList = List.map (function (x,y) -> (y,x));;
	swapLst [(1,2);(3,4);(5,6)];;
		(int * int) list -> (int * int) list = <fun>

let rec map f l = 
	match l with
		[] -> []
		| x::xs -> (f x)::(map f xs)
		
List.filter;;
	('a -> bool) -> 'a list -> 'a list
List.filter (function x -> x mod 2 = 1) [1;2;3;4;5];;
	int list = [1;3;5]
	
let incBy n l = 
	List.map (function x -> x+n);;
incBy 5 [1;2;3;4];;
	int list = [6;7;8;9]
	
let incBy n = List.map (function x -> x+n);;

------------------------------------------------------------------------------------------------------------------------

(* "fold" generalizes the following patterns *)

let rec sumLst l = 
	match l with
		[] -> 0
		| x::xs -> x + (sumLst xs)
		
let rec contains e l = 
	match l with
		 [] -> false
		 | x::xs -> e=x || (contains e xs)
		 
List.fold_right;;
	('a -> 'b -> 'b) -> 'a list -> 'b -> 'b

fold_right f [x1;...xn] b = f(x1, f(x2, ... f(xn, b)...))

List.fold_right (fun x y -> x+y) [1;2;3;4] 0;;
	int = 10

let contains e l = 
	List.fold_right (fun x y -> if x=e then true else y) l false;;
	
	contains 4 [1;2;3];;
		bool = false
	contains 4 [1;2;4;3]
		bool = true
	
+;;
	Syntax error
(+);;													Does not work with (*), since it's a comment. Use ( * ) instead.
	int -> int -> int = <fun>
(+) 3 4;;
	int =7
	
List.fold_right (+)[1;2;3;4] 0;;
	int = 10
	
let rec fold_right f l b = 
	match l with
		[] -> b
		| x::xs -> f x (fold_right(f xs b));;
		
List.fold_left;;
	('a -> 'b -> 'a) -> 'a -> 'b list -> 'a

fold_left f b [x1;...;xn] = f(f(...f(b,x1),x2)...xn)

(* dupLst: 'a list -> 'a list			dupLst [1;2;3] -> [1;1;2;2;3;3] *)

let dupLst l =
	List.fold_right (fun x y -> x::x::y ) l [];;			(fun currElem foldedRest -> currElem::currElem::foldedRest)
	
let dupLst l =
	List.fold_left (fun x y -> x@[y,y]) [] l;;				(fun foldedPrefix currElem -> foldedPrefix@[currElem,currElem])